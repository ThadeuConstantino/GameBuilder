/** * * Copyright (c) 2010 - 2013, http://sgmnt.org/ *  * Permission is hereby granted, free of charge, to any person obtaining * a copy of this software and associated documentation files (the * "Software"), to deal in the Software without restriction, including * without limitation the rights to use, copy, modify, merge, publish, * distribute, sublicense, and/or sell copies of the Software, and to * permit persons to whom the Software is furnished to do so, subject to * the following conditions: *  * The above copyright notice and this permission notice shall be * included in all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. * */package org.sgmnt.lib.net{        import flash.display.LoaderInfo;    import flash.events.Event;    import flash.events.IOErrorEvent;    import flash.events.SecurityErrorEvent;    import flash.filesystem.File;    import flash.filesystem.FileMode;    import flash.filesystem.FileStream;    import flash.net.NetConnection;    import flash.net.NetStream;    import flash.net.URLLoader;    import flash.net.URLLoaderDataFormat;    import flash.net.URLRequest;    import flash.system.LoaderContext;    import flash.utils.ByteArray;    import flash.utils.Dictionary;    import flash.utils.escapeMultiByte;        /**     * AIR に HTTP 経由で NetStream を開始する際に使用するクラスです.     * HTTP 経由でリクエストした際に、読み込んだファイルをアプリケーションディレクトリ内のフォルダ内に保存してから読み込みます.     * HTTP リクエストに失敗した場合でも、ローカルに一度でも保存された事があればそのファイルを読み込みます.     * @author sgmnt.org     */    public class LocalCacheNetStream extends NetStream{                // ------- MEMBER -----------------------------------------------------------------        private var _context:LoaderInfo;		private var _workingDirectory:File;        private var _loadRemoteFileFirst:Boolean;		private var _remoteFileChecked:Boolean;                // ------- PUBLIC -----------------------------------------------------------------                public function LocalCacheNetStream( connection:NetConnection, context:LoaderInfo = null, loadRemoteFileFirst = false, peerID:String="connectToFMS" ){                        super(connection, peerID);						if( !LocalCacheSettings.WORKING_DIRECTORY ){				LocalCacheSettings.WORKING_DIRECTORY = File.applicationDirectory.resolvePath("/cache/__http__");			}						_context             = context || LocalCacheSettings.DEFAULT_CONTEXT;			_workingDirectory    = LocalCacheSettings.WORKING_DIRECTORY;			_loadRemoteFileFirst = loadRemoteFileFirst;						_remoteFileChecked   = false;			        }                override public function play(...parameters):void{			if( _loadRemoteFileFirst ){				//trace("Load remote file first.");				_loadRemoteFile.apply( null, parameters );            }else{				//trace("Load local file first.");				_playLocalFile.apply( null, parameters );            }        }                private function _play( parameters:Array ):void{            //trace( "Play local file ::", parameters );            super.play.apply( null, parameters );        }                private function _playLocalFile( ...parameters ):void{			var f:File;            var url:String;            url = parameters[0];            if( url.indexOf("http") == 0 ){				url = LocalCacheSettings.encode(url);				f   = new File( _workingDirectory.resolvePath( url.substring( url.indexOf("://") + 3, url.length ) ).nativePath );				if( f.exists ){					parameters[0] = f.url;					_play( parameters );				}else{					//trace("Local file does not exists.");					if( !_remoteFileChecked ){						_loadRemoteFile.apply( null, parameters );					}else{						parameters[0] = 'http://localhost/LocalCacheNetStream/error/'+Math.random()+'.flv';						_play( parameters );					}				}            }else{				if( _context ){					f = new File( _context.url );					if(f.isDirectory){						parameters[0] = f.resolvePath(parameters[0]).url;					}else{						parameters[0] = f.resolvePath('../'+ parameters[0]).url;					}				}                _play( parameters );            }        }                private function _loadRemoteFile( ...parameters ):void{                        var request:URLRequest = new URLRequest( parameters[0] );            var url:String;						// 読み込み元が存在し、かつそのURL が _workingDirectory から始まっていた場合.			// つまり元々のリモートに存在したが、現在はローカルに存在する.というものはそこからの相対パスに直す.			if( request.url.indexOf('http') != 0 && _context && -1 < _context.url.indexOf(_workingDirectory.url) ){				var url2 = _context.url;				url2 = url2.replace(_workingDirectory.url,"http:/");				url2 = url2.substr( 0, url2.lastIndexOf("/") ) + "/" + request.url;				url2 = LocalCacheSettings.decode(url2);				request.url = url2;			}else{				url = request.url;			}			            if( url.indexOf("http") == 0 ){								url = LocalCacheSettings.encode(url);                                var filename:String = url.substring( url.lastIndexOf("/") + 1, url.length );                var filepath:String = url.substring( url.indexOf("://") + 3, url.lastIndexOf("/") );                                // 読み込み失敗時の処理.                var onerror:Function = function(e:Event){                    //trace(e);					_playLocalFile.apply( null, parameters );                }                                // 読み込み成功時の処理.                var oncomplete:Function = function(e:Event){                                        //trace(e);										//trace("Create cache file...");										var f:File   = new File( _workingDirectory.resolvePath( filepath + "/" + filename ).nativePath );					var tmp:File = new File( _workingDirectory.resolvePath( filepath + "/" + filename +".tmp").nativePath );					var fs:FileStream = new FileStream();					                    if( f.exists ){                        f.copyTo( tmp, true );                    }                                        try{                        fs.open(f,FileMode.WRITE);                        fs.writeBytes( urlLoader.data as ByteArray );                        fs.close();                        if( tmp.exists ){                            tmp.deleteFile();                        }						//trace("Complete.");                    }catch(e){                        //trace(e);						//trace("Failure.");                        if( tmp.exists ){                            tmp.moveTo( f, true );							//trace("Rollback from temporary copy.");                        }                    }                                        _playLocalFile.apply( null, parameters );                                    }								//trace( "Load remote file :: " + request.url );								_remoteFileChecked = true;								var urlLoader:URLLoader = new URLLoader();				urlLoader.dataFormat = URLLoaderDataFormat.BINARY;                urlLoader.addEventListener( Event.COMPLETE, oncomplete );                urlLoader.addEventListener( IOErrorEvent.IO_ERROR, onerror );                urlLoader.addEventListener( SecurityErrorEvent.SECURITY_ERROR, onerror );                urlLoader.load( request );                            }else{                                _play( parameters );                            }                    }            }}