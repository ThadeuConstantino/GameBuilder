package {
	import com.greensock.TweenNano;
	import com.luaye.console.C;
	
	import flash.display.Loader;
	import flash.display.MovieClip;
	import flash.display.StageAlign;
	import flash.display.StageScaleMode;
	import flash.events.Event;
	import flash.geom.Rectangle;
	import flash.utils.getDefinitionByName;
	
	import control.LoadComponent;
	
	import events.MainEvent;
	import events.SoundEvent;
	
	import model.Global;
	import model.SoundProxy;
	
	import utils.FindInterfaces;
	import utils.LocalDataBase;
	
	/**
	 * ...
	 * @author ...
	 */
	public class Main extends MovieClip 
	{
		private var ld:Loader;
		public var bgMarca:MovieClip;
		public var mcTopBar:MovieClip;
		
		public var mcHolder:MovieClip;
		public var loadingFiles:MovieClip;
		//BD
		public var baseDados:LocalDataBase;
		//WiFi
		public var findInterface:FindInterfaces;
		
		public var objSwf;
		
		//Sounds
		private var sons:SoundProxy;
		
		//pattern Singleton
		private static var _instance:Main;
		public static function get instance():Main { return _instance };
		//
		
		//Scale Objetos
		public var appScale:Number = 1;
		public var appLeftOffset:Number = 0;
		
		public function Main() 
		{
			_instance = this;
			Global.noLinkage = this;
			this.addEventListener(Event.ADDED_TO_STAGE, init);
			
		}
			
		private function disparaSom(e:SoundEvent):void 
		{
			this.sons.play(e.id, e.preventConcurrentSounds, e.times );
		}
		
		private function init(e:Event):void 
		{
			removeEventListener(Event.ADDED_TO_STAGE, init);
			
			stage.scaleMode = StageScaleMode.NO_SCALE;
			stage.align = StageAlign.TOP_LEFT;
			
			this.loadingFiles.visible = false;
			this.mcTopBar.mcLogoTipo.visible = false;
			
			//C.startOnStage(this, "`");
			//C.commandLine = false;
			//C.commandLineAllowed = false;
			//C.x = 0;
			//C.width = 350;
			//C.height = 150;
			//C.strongRef = true;
		    //C.visible = true;
			
			
			this.addEventListener(MainEvent.ADD_COMPONENT, addComponent);
			this.addEventListener(MainEvent.REMOVE_COMPONENT, removeComponent);
			
			this.sons = new SoundProxy( "sounds.xml" );
			this.addEventListener(SoundEvent.DISPARA_SOM, disparaSom);
			
			this.baseDados = new LocalDataBase();
			
			this.dispatchEvent(new MainEvent(MainEvent.ADD_COMPONENT, "PopLogo"));
			
			this.calculoResponsivo();
		}
		
		private function calculoResponsivo():void 
		{			
			var guiSize:Rectangle = new Rectangle(0, 0, 1024, 600);
			var deviceSize:Rectangle = new Rectangle(0, 0,
				Math.max(stage.fullScreenWidth, stage.fullScreenHeight),
				Math.min(stage.fullScreenWidth, stage.fullScreenHeight));
			
			var appSize:Rectangle = guiSize.clone();
			//C.log(deviceSize.width)
			//C.log(deviceSize.height)
			// if device is wider than GUI's aspect ratio, height determines scale
			if ((deviceSize.width/deviceSize.height) > (guiSize.width/guiSize.height)) {
				appScale = deviceSize.height / guiSize.height;
				appSize.width = deviceSize.width / appScale;
				appLeftOffset = Math.round((appSize.width - guiSize.width) / 2);
				
			} 
				// if device is taller than GUI's aspect ratio, width determines scale
			else {
				appScale = deviceSize.width / guiSize.width;
				appSize.height = deviceSize.height / appScale;
				appLeftOffset = 0;
			}
			// scale the entire interface
			this.loadingFiles.scaleX = this.loadingFiles..scaleY = appScale;

			this.loadingFiles.x = deviceSize.width/2
			this.loadingFiles.x += appLeftOffset;
			this.loadingFiles.y += (appSize.height - guiSize.height)/2
			
			this.bgMarca.scaleX = this.bgMarca.scaleY = appScale;
			this.mcTopBar.scaleX = this.mcTopBar.scaleY = appScale;
			//C.log("CAPABILITIES  "+Capabilities.os);
				
		}
		
		//Faz a inserção de telas no simulador
		public function insertChildHolder(_ld:Loader):void
		{			
			this.addChild(_ld);
		}
		
		//LOAD
		
		
		private function addComponent(event:MainEvent):void 
		{
			var ClassReference:Class = getDefinitionByName("Mc" + event.strUrlAdd) as Class;
			this.objSwf = new ClassReference();
			this.objSwf.alpha = 0;
			
			this.mcHolder.addChild(this.objSwf);

			if(event.strUrlAdd != "PopLogo")TweenNano.to(this.objSwf, .5, { alpha:1 } );
		}	
		
		
		private function removeComponent(event:MainEvent):void 
		{	
			if (event.strUrlAdd != "") {
				TweenNano.to(this.objSwf, .5, { alpha:0, onComplete:tweenUnLoadComplete, onCompleteParams:[event] } );
			}else {
				TweenNano.to(this.objSwf, .5, { alpha:0, onComplete:tweenUnLoadComplete, onCompleteParams:[event] } );
			}
			
		}
		
		private function tweenUnLoadComplete(event:MainEvent):void 
		{	
			this.mcHolder.removeChild(this.objSwf);
			
			if (event.strUrlAdd != "") 
			{	
				this.dispatchEvent(new MainEvent(MainEvent.ADD_COMPONENT, event.strUrlAdd, "", true));
			}else {
				this.dispatchEvent(new MainEvent(MainEvent.REMOVE_COMPLETED, "", event.strUrlRemove));
			}
			
		}
	}

}